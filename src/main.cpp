/* 使用0.96寸的OLED屏幕需要使用包含这个头文件 */
#include "SSD1306Wire.h"

/* 设置oled屏幕的相关信息 */
const int I2C_ADDR = 0x3c; // oled屏幕的I2c地址

#define SDA_PIN 4          // SDA引脚，默认gpio4(D2)
#define SCL_PIN 5          // SCL引脚，默认gpio5(D1)

/* 新建一个oled屏幕对象，需要输入IIC地址，SDA和SCL引脚号 */
SSD1306Wire oled(I2C_ADDR, SDA_PIN, SCL_PIN);
static const uint8_t text[][60] = {
    {0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x40, 0x00, 0x01, 0xC0, 0x08, 0x01, 0x42, 0x08, 0x01, 0x46, 0x08, 0x01, 0x7C, 0x08, 0x01, 0x7C, 0x08, 0x01, 0x78, 0x08, 0x01, 0x40, 0x08, 0x01, 0x40, 0x08, 0x01, 0x78, 0x08, 0x01, 0x7E, 0x08, 0x01, 0x4E, 0x08, 0x01, 0x46, 0x0C, 0x01, 0x60, 0x0C, 0x01, 0x60, 0x88, 0x01, 0x40, 0x80, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00}, /*"兰",0*/
    {0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x06, 0x02, 0x00, 0x81, 0x01, 0x00, 0x70, 0x00, 0xFC, 0x1F, 0x00, 0x04, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"州",1*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x04, 0x40, 0x00, 0x02, 0x40, 0x00, 0x02, 0x40, 0x00, 0x01, 0x40, 0x80, 0x00, 0x40, 0x60, 0x00, 0x40, 0x38, 0x00, 0xFE, 0x0F, 0x00, 0x40, 0x03, 0x00, 0x40, 0x0C, 0x00, 0x40, 0x30, 0x00, 0x40, 0x40, 0x00, 0x40, 0x80, 0x00, 0x40, 0x00, 0x01, 0x40, 0x00, 0x03, 0x60, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"大",2*/
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x80, 0x11, 0x00, 0x40, 0x11, 0x00, 0x5C, 0x11, 0x00, 0x78, 0x11, 0x00, 0x40, 0x11, 0x02, 0x42, 0x11, 0x02, 0x5C, 0x11, 0x06, 0x58, 0xF9, 0x03, 0x40, 0x15, 0x00, 0x40, 0x13, 0x00, 0x70, 0x13, 0x00, 0x4E, 0x11, 0x00, 0x44, 0x10, 0x00, 0x40, 0x11, 0x00, 0xC0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"学",3*/
};

const uint8_t image[] PROGMEM =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xC0, 0xFC, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0xEE, 0xFB, 0x03, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE7, 0xE3, 0x07, 0x00, 0x00,
        0x00, 0x00, 0xA0, 0xC3, 0xDB, 0x06, 0x00, 0x00, 0x00, 0x00, 0x20, 0xFB, 0xDB, 0x05, 0x00, 0x00, 0x00, 0x00, 0x20, 0xFB, 0xDB, 0x07, 0x00, 0x00,
        0x00, 0x00, 0xA0, 0xC3, 0xDB, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE7, 0xE3, 0x07, 0x00, 0x00, 0x00, 0x00, 0x40, 0xDE, 0xFB, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x80, 0xFD, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x3D, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xC0, 0xC3, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC3, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0x6F, 0x86, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x80, 0xFF, 0x87, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC7, 0x03, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x7D, 0xCF, 0x03, 0x00, 0x00,
        0x00, 0x00, 0xC0, 0xFF, 0xBF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xF0, 0xC1, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xC1, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xC0, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xF8, 0xC1, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x03, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xFC, 0xC3, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0xC1, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC4, 0x07, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xC0, 0xC6, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xC6, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xC7, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xFF, 0xC3, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0xC5, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x8C, 0xC7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x7D, 0xC3, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xCF, 0x03, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFD, 0xCF, 0x03, 0x00, 0x00,
        0x00, 0x00, 0xC0, 0xFF, 0xCF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC6, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0xC0, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*D:\onedrive\桌面\bmp文件\7-200Z9143250647.bmp",0*/
};

#define BLINKER_PRINT Serial
#define BLINKER_WIFI

#include <Blinker.h>

char auth[] = "66b44e42cba1";
char ssid[] = "TP-LINK_2011";
char pswd[] = "20112011";

// 新建组件对象
BlinkerButton Button1("btn-abc");
BlinkerNumber Number1("num-abc");

int counter = 0;

// 按下按键即会执行该函数
void button1_callback(const String &state)
{
    BLINKER_LOG("get button state: ", state);
    digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
}

// 如果未绑定的组件被触发，则会执行其中内容
void dataRead(const String &data)
{
    BLINKER_LOG("Blinker readString: ", data);
    counter++;
    Number1.print(counter);
}
void drawRect(void)
{
    for (int16_t i = 0; i < oled.getHeight() / 2; i += 2)
    {
        oled.drawRect(i, i, oled.getWidth() - 2 * i, oled.getHeight() - 2 * i);
        oled.display();
        delay(50);
    }
}
    void setup()
    {
        // 初始化串口
        Serial.begin(9600);
        BLINKER_DEBUG.stream(Serial);
        BLINKER_DEBUG.debugAll();

        // 初始化有LED的IO
        pinMode(LED_BUILTIN, OUTPUT);
        digitalWrite(LED_BUILTIN, HIGH);
        // 初始化blinker
        Blinker.begin(auth, ssid, pswd);
        Blinker.attachData(dataRead);

        Button1.attach(button1_callback);

        /* 2. oled屏幕初始化 */
        oled.init();
        oled.flipScreenVertically(); // 设置屏幕翻转
        oled.setContrast(255);       // 设置屏幕亮度
        drawRect();                  // 测试屏幕显示
        oled.clear();
        oled.display(); // 清除屏幕
    }

    void loop()
    {
        Blinker.run();
        oled.setFont(ArialMT_Plain_24); // 设置字体
        oled.drawString(0, 0, "LZU!");  //将要显示的文字写入缓存
        oled.drawString(0, 20, "I am hlchen!");
        oled.display(); // 将缓存里的文字在屏幕上显示
        delay(3000);
        oled.clear();
        oled.display(); // 清除屏幕

        /* 显示汉字 */
        oled.drawFastImage(4 + 20 * 0, 22, 20, 20, text[0]);
        oled.drawFastImage(4 + 20 * 1, 22, 20, 20, text[1]);
        oled.drawFastImage(4 + 20 * 2, 22, 20, 20, text[2]);
        oled.drawFastImage(4 + 20 * 3, 22, 20, 20, text[3]);
        oled.display();
        delay(3000);
        oled.clear();
        oled.display(); // 清除屏幕

        /* 3. 显示图片*/
        oled.drawFastImage(32, 0, 64, 64, image);
        oled.display();
        delay(3000);
        oled.clear();
        oled.display(); // 清除屏幕

        /* 4. LED状态取反 */
        digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
    }
